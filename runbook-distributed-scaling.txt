1)  Prerequisites-
    Install python3.7 
        sudo yum install python3 -y
    Install aws cli - v1
        pip3 install --upgrade --user awscli (install using pip3)
        export PATH=$HOME/.local/bin:$PATH (add cli to path)
        source ~/.bash_profile (reload current session)
        aws --version (verify)
    Install kops
        download executable - curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-darwin-amd64
        add execute permissions - chmod +x kops-darwin-amd64
        add to path - sudo mv kops-darwin-amd64 /usr/local/bin/kops
        verify - kops version
    Install kubectl
        download executable - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
        add execute permissions - chmod +x ./kubectl
        add to path - sudo mv ./kubectl /usr/local/bin/kubectl
        verify - kubectl version --client
    Install helm
        download executable - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        add execute permissions - chmod 700 get_helm.sh
        execute - ./get_helm.sh

2)  Set Kops env var in $HOME/.bash_profile 
    KOPS_STATE_STORE=s3://bucket/url
    NAME=some.dns.ready.cluster.name (digions.org.in)

3)  Create Route 53 Record Set, same as cluster-name set in NAME
    Add NS entries to parent dns provider(godaddy-optional)

4)  Create cluster
    kops create cluster --name=$NAME --state=$KOPS_STATE_STORE --zones=us-west-2a --cloud-labels "Resource=KOPS,NAME=KOPS-ADMIN,Owner=Ankit"

5)  Create instance group 
    kops create ig ig-name --name=$NAME(in both worker igs add nodeLables type: someUniqueValueAcrossIgs under spec.nodeLabels.type: compute/amd-compute)
    kops update cluster $NAME --yes

6)  Set kubectl context
    kops export kubecfg $NAME

7)  Clone Repo 
    git clone https://github.com/kazekin94/digions.org.in.git

8)  Install application using helm (Assumes repo was cloned in home)
    NOTE-This step will install application on nodes with label type: compute
    helm install --generate-name digions.org.in/dummy/

9)  Verify app object installation
    kubectl get all (should give 1 dummy srv, 2 dummy deployment, 2 dummy replicaset, 4 dummy pods, 1 configmap)

10)  Verify application versions
     curl lb-dns-name (running cmd multiple time should result in nginx and apache default pages)

11) Add SQS permissions to master and slave nodes
    aws iam attach-role-policy --role-name nodes/masters.digions.org.in --policy-arn arn:aws:iam::aws:policy/AmazonSQSFullAccess

12) Install aws cw hpa in a new custom-metrics namespace, namespace is created automatically
    kubectl apply -f https://raw.githubusercontent.com/awslabs/k8s-cloudwatch-adapter/master/deploy/adapter.yaml

13) Verify installation 
    kubectl get --raw "/apis/external.metrics.k8s.io/v1beta1" | jq
    Output should be 
    {
        "kind": "APIResourceList",
        "apiVersion": "v1",
        "groupVersion": "external.metrics.k8s.io/v1beta1",
        "resources": [
        ]
    }    

14) Clone AWS sample app in home dir
    git clone https://github.com/awslabs/k8s-cloudwatch-adapter.git


11) Uninstall app
    helm ls (copy name)
    helm uninstall name

12) Tear down cluster
    kops delete cluster $NAME --yes
